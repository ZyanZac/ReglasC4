{
  "dsl_reference": "https://structurizr.com/dsl",
  "fixed_template": {
    "systemContext": "workspace \"SYSTEM_NAME\" {\n    model {\n        USER = person \"USER_NAME\" {\n            description \"USER_PURPOSE\"\n            tags \"User\"\n        }\n        group \"PRINCIPAL_GROUP\" {\n            SYSTEM = softwareSystem \"SYSTEM_NAME\" {\n                description \"SYSTEM_PURPOSE\"\n                tags \"system\"\n            }\n        }\n        group \"PROVIDER_GROUP\" {\n            EXTERNAL_SYSTEM = softwareSystem \"EXTERNAL_SYSTEM_NAME\" {\n                description \"EXTERNAL_SYSTEM_PURPOSE\"\n                tags \"external PROVIDER_TAG\"\n            }\n        }\n        USER -> SYSTEM \"VERB DESCRIPTION\"\n        SYSTEM -> EXTERNAL_SYSTEM \"VERB DESCRIPTION\"\n    }\n    views {\n        systemContext SYSTEM \"SystemContext\" {\n            include *\n            autoLayout lr\n        }\n        styles {\n            element \"Person\" {\n                background #08427b\n                color white\n                shape person\n            }\n            element \"system\" {\n                background #003366\n                color white\n                shape roundedbox\n            }\n            element \"external\" {\n                background #f2f2f2\n                color black\n                shape roundedbox\n            }\n            element \"sat\" {\n                background #666666\n                color white\n                shape roundedbox\n            }\n            element \"sep\" {\n                background #666666\n                color white\n                shape roundedbox\n            }\n            element \"firebase\" {\n                background #4285F4\n                color white\n                shape roundedbox\n            }\n            element \"amazon\" {\n                background #FF9900\n                color black\n                shape roundedbox\n            }\n        }\n    }\n}",
    "container": "workspace \"SYSTEM_NAME\" {\n    model {\n        MAIN_SYSTEM = softwareSystem \"MAIN_SYSTEM_NAME\" {\n            CONTAINER = container \"CONTAINER_NAME\" {\n                description \"CONTAINER_PURPOSE\"\n                tags \"container\"\n                technology \"TECH\"\n            }\n        }\n        USER = person \"USER_NAME\" { optional true;\n            description \"USER_PURPOSE\"\n            tags \"User\"\n        }\n        EXTERNAL_SYSTEM = softwareSystem \"EXTERNAL_SYSTEM_NAME\" { optional true;\n            description \"EXTERNAL_SYSTEM_PURPOSE\"\n            tags \"external\"\n        }\n        USER -> CONTAINER \"VERB DESCRIPTION\"\n        CONTAINER -> CONTAINER \"VERB DESCRIPTION\"\n        CONTAINER -> EXTERNAL_SYSTEM \"VERB DESCRIPTION\"\n    }\n    views {\n        container MAIN_SYSTEM \"Containers\" {\n            include *\n            autoLayout lr\n        }\n        styles {\n            element \"Person\" {\n                background #08427b\n                color white\n                shape person\n            }\n            element \"SoftwareSystem\" {\n                background #e0e0e0\n                color black\n                shape roundedbox\n            }\n            element \"external\" {\n                background #f2f2f2\n                color black\n                shape roundedbox\n            }\n            element \"container\" {\n                background #d0d0ff\n                color black\n                shape roundedbox\n            }\n        }\n    }\n}",
    "component": "workspace \"SYSTEM_NAME\" {\n    model {\n        MAIN_SYSTEM = softwareSystem \"MAIN_SYSTEM_NAME\" {\n            CONTAINER = container \"CONTAINER_NAME\" {\n                COMPONENT = component \"COMPONENT_NAME\" {\n                    description \"COMPONENT_PURPOSE\"\n                    tags \"component\"\n                    technology \"TECH\"\n                }\n            }\n        }\n        USER = person \"USER_NAME\" { optional true;\n            description \"USER_PURPOSE\"\n            tags \"User\"\n        }\n        EXTERNAL_SYSTEM = softwareSystem \"EXTERNAL_SYSTEM_NAME\" { optional true;\n            description \"EXTERNAL_SYSTEM_PURPOSE\"\n            tags \"external\"\n        }\n        USER -> COMPONENT \"VERB DESCRIPTION\"\n        COMPONENT -> COMPONENT \"VERB DESCRIPTION\"\n        COMPONENT -> EXTERNAL_SYSTEM \"VERB DESCRIPTION\"\n    }\n    views {\n        component CONTAINER \"Components\" {\n            include *\n            autoLayout lr\n        }\n        styles {\n            element \"Person\" {\n                background #08427b\n                color white\n                shape person\n            }\n            element \"SoftwareSystem\" {\n                background #e0e0e0\n                color black\n                shape roundedbox\n            }\n            element \"external\" {\n                background #f2f2f2\n                color black\n                shape roundedbox\n            }\n            element \"container\" {\n                background #d0d0ff\n                color black\n                shape roundedbox\n            }\n            element \"component\" {\n                background #b0ffb0\n                color black\n                shape box\n            }\n        }\n    }\n}"
  },
  "template_comments": {
    "workspace": "System name, e.g., Certificados Digitales",
    "person": "User role, e.g., Representante del Instituto",
    "group": "Group for systems, e.g., Sistema Institucional or Gobierno",
    "softwareSystem": "System, e.g., app = softwareSystem 'CertificadosService'",
    "container": "Container, e.g., webApp = container 'WebApp'",
    "component": "Component, e.g., controller = component 'Controller'",
    "relationship": "Action, e.g., solicita certificados",
    "views": "Diagram views and styles"
  },
  "glossary": {
    "allowed_names": {
      "system": [
        "Service",
        "API",
        "App",
        "Microservice",
        "Platform",
        "Gateway",
        "EventBus",
        "PaymentGateway",
        "NotificationService",
        "AnalyticsEngine"
      ],
      "data_storage": [
        "Database",
        "Repository",
        "Queue",
        "Cache",
        "FileStore",
        "DataWarehouse",
        "BlobStorage",
        "GraphDB",
        "MongoDB",
        "PostgreSQL",
        "MySQL"
      ],
      "interface": [
        "Frontend",
        "UI",
        "Mobile",
        "CLI",
        "Dashboard",
        "Portal",
        "WebClient",
        "NativeApp"
      ],
      "container": [
        "WebApp",
        "API",
        "Database",
        "Queue",
        "Cache",
        "MobileApp",
        "GraphQLAPI",
        "MessageBroker",
        "BatchProcessor",
        "NativeScriptApp",
        "ReactNativeApp",
        "FlutterApp"
      ],
      "component": [
        "Controller",
        "Model",
        "Service",
        "Repository",
        "Adapter",
        "Processor",
        "Validator",
        "Orchestrator",
        "EventHandler",
        "APIClient"
      ]
    },
    "allowed_verbs": [
      "valida",
      "almacena",
      "genera",
      "consulta",
      "envía",
      "solicita",
      "verifica",
      "autentica",
      "procesa",
      "carga",
      "firma",
      "notifica",
      "orquesta",
      "transmite",
      "sincroniza",
      "renderiza",
      "integra"
    ],
    "allowed_tags": [
      "User",
      "system",
      "external",
      "container",
      "component",
      "sat",
      "sep",
      "firebase",
      "amazon",
      "payment",
      "authentication",
      "messaging",
      "analytics",
      "logging",
      "mobile",
      "web",
      "database",
      "api"
    ],
    "forbidden_names": [
      "module",
      "tool",
      "resource",
      "componente",
      "platforma",
      "framework",
      "library",
      "package",
      "plugin"
    ],
    "synonyms": {
      "autentica|confirma|identifica|authenticates": "autentica",
      "verifica|valida|comprueba|checks": "verifica",
      "guarda|persiste|saves|stores": "almacena",
      "crea|produce|generates|creates": "solicita",
      "busca|lee|retrieves|reads": "consulta",
      "envía|transmite|delivers|sends": "envía",
      "pide|requiere|requests|requires": "solicita",
      "procesa|analiza|handles|processes": "procesa",
      "carga|sube|uploads": "carga",
      "firma|certifica|signs": "carga",
      "notifica|informa|alerts|notifies": "notifica",
      "orquesta|coordina|manages|orchestrates": "orquesta",
      "transmite|fluye|streams|transmits": "transmite",
      "sincroniza|actualiza|syncs|updates": "sincroniza",
      "renderiza|muestra|renders|displays": "renderiza",
      "integra|conecta|integrates|links": "integra",
      "base de datos|almacenamiento|storage|db": "Database",
      "aplicación|sistema|application|system": "App",
      "servicio|microservicio|service": "Service",
      "interfaz|web|interface|gui": "Frontend",
      "cola|mensajería|queue|messaging": "Queue",
      "caché|memoria|cache": "Cache",
      "móvil|app móvil|mobile|native app": "MobileApp",
      "controlador|gestor|controller": "Controller",
      "adaptador|conector|adapter": "Adapter",
      "puerta de enlace|gateway|entrypoint": "Gateway",
      "almacén de datos|data warehouse": "DataWarehouse",
      "nativescript|reactnative|flutter|xamarin": "MobileApp"
    }
  },
  "mapping_guidelines": {
    "usage_note": "Map descriptions to DSL elements based on specified C4 level, handling unlisted terms dynamically and parsing clarifications accurately with pre-generation validation.",
    "level_detection": {
      "systemContext": [
        "context",
        "system context",
        "diagrama de contexto",
        "system",
        "application",
        "web",
        "service",
        "external system"
      ],
      "container": [
        "container",
        "containers",
        "diagrama de contenedores",
        "web app",
        "api",
        "database",
        "mobile app"
      ],
      "component": [
        "component",
        "components",
        "diagrama de componentes",
        "controller",
        "repository",
        "service",
        "model",
        "module",
        "handler"
      ],
      "restrict_others": "Reject levels not explicitly specified. Default to systemContext only if no level is mentioned. For 'diagrama de componentes', enforce component level with components inside a container."
    },
    "systems": {
      "keywords": [
        "application",
        "app",
        "service",
        "system",
        "microservice",
        "gateway",
        "platform"
      ],
      "maps_to": "softwareSystem with tag system for systemContext, container/component for respective levels, preferring names like 'Service'",
      "example": "If 'web app' in systemContext, create 'app = softwareSystem \"CertificadosService\"' with tag 'system'."
    },
    "users": {
      "keywords": [
        "user",
        "customer",
        "admin",
        "representante",
        "encargado"
      ],
      "maps_to": "person with tag User",
      "example": "If 'encargado', create 'encargado = person \"Encargado\"' with tag 'User'."
    },
    "external_systems": {
      "keywords": [
        "sat",
        "sep",
        "firebase",
        "rekognition",
        "amazon",
        "google",
        "paypal",
        "stripe",
        "aws",
        "azure",
        "gcp"
      ],
      "maps_to": "softwareSystem in provider-specific group with tags external and provider for all levels",
      "example": "If 'SAT', create 'sat = softwareSystem \"SAT\"' in group 'Gobierno' with tag 'external sat'."
    },
    "containers": {
      "keywords": [
        "web app",
        "mobile app",
        "backend",
        "database",
        "api",
        "queue",
        "processor"
      ],
      "maps_to": "container with appropriate tag (e.g., web, mobile, database) and technology from description",
      "example": "If 'mobile app made with NativeScript', create 'mobileApp = container \"MobileApp\" { technology \"NativeScript\"; tags \"container mobile\" }'."
    },
    "components": {
      "keywords": [
        "controller",
        "service",
        "repository",
        "module",
        "handler",
        "ui",
        "auth",
        "processor",
        "generator"
      ],
      "maps_to": "component within a container with appropriate tag and technology from description",
      "example": "If 'authentication module' in component description, create 'auth = component \"Authentication\" { technology \"Firebase Authentication\"; tags \"component\" }'."
    },
    "relationships": {
      "keywords_to_verbs": {
        "consulta|busca|lee|retrieves": "consulta",
        "guarda|almacena|saves|stores": "almacena",
        "crea|produce|generates|creates": "solicita",
        "envía|transmite|delivers|sends": "envía",
        "pide|requiere|requests|requires": "solicita",
        "verifica|valida|comprueba|checks": "verifica",
        "autentica|confirma|identifica|authenticates": "autentica",
        "procesa|analiza|handles|processes": "procesa",
        "carga|sube|uploads": "carga",
        "firma|certifica|signs": "carga",
        "notifica|informa|alerts|notifies": "notifica",
        "orquesta|coordina|manages|orchestrates": "orquesta",
        "transmite|fluye|streams|transmits": "transmite",
        "sincroniza|actualiza|syncs|updates": "sincroniza",
        "renderiza|muestra|renders|displays": "renderiza",
        "integra|conecta|integrates|links": "integra"
      },
      "clarifications": {
        "sat|no se envía|user-provided|e.firma": "Mandatory: Use 'carga' for user-provided signature files, no direct system-to-SAT interaction (e.g., 'representante -> app \"Carga firma electrónica\"' in System Context, 'representante -> component \"Carga firma electrónica\"' in Component). Apply pre-generation validation.",
        "firebase|backend|logic": "Mandatory: Map to container with components for backend logic in Container/Component diagrams (e.g., 'backend = container \"Backend\" { logic = component \"Logic\" }'), using 'almacena' or 'procesa' for interactions. In System Context, use 'procesa' or 'almacena' for relationships (e.g., 'app -> Firebase \"Procesa lógica de negocio\"'). Apply pre-generation validation.",
        "sep|guidelines|lineamientos": "Mandatory: Use 'consulta' or 'verifica' for guideline-related interactions (e.g., 'app -> SEP \"Verifica lineamientos\"'). Avoid 'envía' unless explicitly described. Apply pre-generation validation.",
        "no interaction|no data sent": "Map to user-driven action (e.g., 'carga') or internal app processing.",
        "any|user action": "Map to user-driven verbs like 'solicita', 'carga'."
      },
      "example": "If 'app generates certificates', create 'user -> app \"Solicita certificados\"'. If 'SAT provides signature', create 'user -> app \"Carga firma electrónica\"'.",
      "syntax": "Use 'SOURCE -> DESTINATION \"VERB DESCRIPTION\"' within model block. Description must start with an allowed verb, be concise, and distinct from element descriptions."
    },
    "groups": {
      "keywords_to_groups": {
        "sat|sep": "Gobierno",
        "firebase|firestore|realtime database": "Google",
        "rekognition|amazon|aws": "Amazon",
        "paypal|stripe": "Pagos",
        "azure": "Azure",
        "gcp": "GCP"
      },
      "example": "If 'SAT', group under 'Gobierno' with tag 'sat'.",
      "fallback": "Use 'Servicios Externos' only for unspecified providers."
    },
    "dynamic_mapping": {
      "unknown_technologies": "Map unlisted technology terms to closest allowed_name based on context (e.g., 'NativeScript' → 'MobileApp' if mobile-related) or allow as technology property with generic container (e.g., container 'App' { technology 'NativeScript' }). Assign default tag 'container' or 'external' and style (background #f2f2f2; color black; shape roundedbox).",
      "unknown_domain_terms": "Map unlisted domain-specific terms to softwareSystem or container with descriptive name (e.g., 'BlockchainLedger' → softwareSystem 'BlockchainLedger'). Assign default tag 'external' or 'container' and style.",
      "context_clues": {
        "made with|built with|developed in|uses|implemented in": "Map term to technology property (e.g., 'made with NativeScript' → technology 'NativeScript').",
        "mobile|app|phone": "Map to container with type 'MobileApp' and tag 'mobile'.",
        "database|storage|data": "Map to container with type 'Database' and tag 'database'.",
        "api|endpoint|rest|graphql": "Map to container with type 'API' and tag 'api'.",
        "external|third-party|provider": "Map to softwareSystem in provider-specific group with tag 'external'.",
        "machine learning|ai|ml|neural": "Map to container with type 'Processor' and tag 'processor'."
      },
      "example": "If 'made with NativeScript' in container description, create 'mobile = container \"MobileApp\" { technology \"NativeScript\"; tags \"container mobile\" }'. If 'BlockchainLedger' in systemContext, create 'group \"Servicios Externos\" { ledger = softwareSystem \"BlockchainLedger\" { tags \"external\" } }'."
    },
    "fallback_mapping": {
      "unknown_verbs": "Use 'consulta' for queries, 'solicita' for requests, 'carga' for uploads, based on context.",
      "unknown_names": "Use 'Service' for systems, 'Database' for storage, 'Frontend' for interfaces, 'Service' for components, or retain descriptive name for unlisted terms with dynamic_mapping.",
      "unknown_groups": "Use 'Servicios Externos' only for unspecified providers."
    },
    "optional_rules": {
      "groups": "Mandatory provider-specific groups for external systems in all levels.",
      "person": "Include only if users are mentioned in description.",
      "systemContext_view": "Include view if description specifies a context diagram."
    }
  },
  "validation_order": [
    "R01-WORKSPACE-ONLY",
    "R02-MODEL-VIEWS",
    "R03-ELEMENT-DEFINED",
    "R04-LEVEL-ENFORCEMENT",
    "R05-GROUP-REQUIRED",
    "R06-ALLOWED-NAMES",
    "R07-SIMPLE-TAG",
    "R08-ALLOWED-ELEMENTS",
    "R09-SYNTAX-VALIDATION",
    "R10-ALLOWED-VERBS",
    "R11-CORRECT-REFERENCES",
    "R12-NO-COMMENTS",
    "R13-VIEW-OPTIONAL",
    "R14-STYLE-DEFINITIONS",
    "R15-DISTINCT-DESCRIPTIONS",
    "R16-STRUCTURIZR-DSL-ONLY"
  ],
  "validation_groups": [
    {
      "group": "Structure",
      "rules": [
        "R01-WORKSPACE-ONLY",
        "R02-MODEL-VIEWS",
        "R04-LEVEL-ENFORCEMENT",
        "R13-VIEW-OPTIONAL",
        "R16-STRUCTURIZR-DSL-ONLY"
      ]
    },
    {
      "group": "Elements",
      "rules": [
        "R03-ELEMENT-DEFINED",
        "R05-GROUP-REQUIRED",
        "R06-ALLOWED-NAMES",
        "R07-SIMPLE-TAG",
        "R08-ALLOWED-ELEMENTS"
      ]
    },
    {
      "group": "Details",
      "rules": [
        "R10-ALLOWED-VERBS",
        "R11-CORRECT-REFERENCES",
        "R12-NO-COMMENTS",
        "R09-SYNTAX-VALIDATION",
        "R15-DISTINCT-DESCRIPTIONS"
      ]
    },
    {
      "group": "Styling",
      "rules": [
        "R14-STYLE-DEFINITIONS"
      ]
    }
  ],
  "example_mappings": [
    {
      "description": "Una aplicación web que genera los xml de certificados y títulos al representante de su instituto privado. Se vincula con Amazon Rekognition para datos biométricos, Firebase para la base de datos y backend, el SAT para la firma electrónica y la SEP(MET/MEC) para los lineamientos de los certificados y títulos. Realmente lo único que hace el SAT es darte tu firma electrónica. El usuario debería tener todos los archivos relacionados a esta y cargarlos en la aplicación para hacer válida la firma. No se envía nada al SAT.",
      "level": "systemContext",
      "dsl": "workspace \"Certificados Digitales\" {\n    model {\n        representante = person \"Representante del Instituto\" {\n            description \"Encargado de generar certificados y títulos digitales\"\n            tags \"User\"\n        }\n        group \"Sistema Institucional\" {\n            app = softwareSystem \"CertificadosService\" {\n                description \"Sistema para generar certificados en XML\"\n                tags \"system\"\n            }\n        }\n        group \"Gobierno\" {\n            sat = softwareSystem \"SAT\" {\n                description \"Provee firma electrónica para certificados\"\n                tags \"external sat\"\n            }\n            sep = softwareSystem \"SEP (MET/MEC)\" {\n                description \"Define lineamientos para certificados\"\n                tags \"external sep\"\n            }\n        }\n        group \"Google\" {\n            firebase = softwareSystem \"Firebase\" {\n                description \"Gestiona autenticación y almacenamiento\"\n                tags \"external firebase\"\n            }\n        }\n        group \"Amazon\" {\n            rekognition = softwareSystem \"Amazon Rekognition\" {\n                description \"Verifica datos biométricos\"\n                tags \"external amazon\"\n            }\n        }\n        representante -> app \"Solicita certificados digitales\"\n        representante -> app \"Carga firma electrónica\"\n        app -> sep \"Verifica lineamientos\"\n        app -> firebase \"Autentica y almacena datos\"\n        app -> rekognition \"Valida biometría\"\n    }\n    views {\n        systemContext app \"SystemContext\" {\n            include *\n            autoLayout lr\n        }\n        styles {\n            element \"Person\" { background #08427b; color white; shape person }\n            element \"system\" { background #003366; color white; shape roundedbox }\n            element \"external\" { background #f2f2f2; color black; shape roundedbox }\n            element \"sat\" { background #666666; color white; shape roundedbox }\n            element \"sep\" { background #666666; color white; shape roundedbox }\n            element \"firebase\" { background #4285F4; color white; shape roundedbox }\n            element \"amazon\" { background #FF9900; color black; shape roundedbox }\n        }\n    }\n}"
    },
    {
      "description": "Un diagrama de contenedores para una aplicación móvil que genera certificados, hecha con NativeScript, con un backend en Node.js y base de datos en Firebase. Se vincula con Amazon Rekognition para biometría y SEP para lineamientos.",
      "level": "container",
      "dsl": "workspace \"Certificados Digitales\" {\n    model {\n        app = softwareSystem \"CertificadosService\" {\n            mobileApp = container \"MobileApp\" {\n                description \"Interfaz móvil para usuarios\"\n                tags \"container mobile\"\n                technology \"NativeScript\"\n            }\n            backend = container \"Backend\" {\n                description \"Lógica de negocio y procesamiento\"\n                tags \"container api\"\n                technology \"Node.js\"\n            }\n            database = container \"Database\" {\n                description \"Almacena datos de certificados\"\n                tags \"container database\"\n                technology \"Firebase\"\n            }\n        }\n        representante = person \"Representante del Instituto\" {\n            description \"Encargado de generar certificados\"\n            tags \"User\"\n        }\n        group \"Gobierno\" {\n            sep = softwareSystem \"SEP (MET/MEC)\" {\n                description \"Define lineamientos para certificados\"\n                tags \"external sep\"\n            }\n        }\n        group \"Amazon\" {\n            rekognition = softwareSystem \"Amazon Rekognition\" {\n                description \"Verifica datos biométricos\"\n                tags \"external amazon\"\n            }\n        }\n        representante -> mobileApp \"Solicita certificados y carga firma\"\n        mobileApp -> backend \"Envía solicitudes\"\n        backend -> database \"Almacena y consulta datos\"\n        backend -> sep \"Verifica lineamientos\"\n        backend -> rekognition \"Valida biometría\"\n    }\n    views {\n        container app \"Containers\" {\n            include *\n            autoLayout lr\n        }\n        styles {\n            element \"Person\" { background #08427b; color white; shape person }\n            element \"SoftwareSystem\" { background #e0e0e0; color black; shape roundedbox }\n            element \"external\" { background #f2f2f2; color black; shape roundedbox }\n            element \"container\" { background #d0d0ff; color black; shape roundedbox }\n            element \"mobile\" { background #d0d0ff; color black; shape roundedbox }\n            element \"database\" { background #d0d0ff; color black; shape roundedbox }\n            element \"api\" { background #d0d0ff; color black; shape roundedbox }\n        }\n    }\n}"
    },
    {
      "description": "Un diagrama de componentes para el backend de una aplicación web que genera certificados, incluyendo un controlador de certificados, servicio de biometría, y repositorio de datos. Se vincula con Firebase y Amazon Rekognition.",
      "level": "component",
      "dsl": "workspace \"Certificados Digitales\" {\n    model {\n        app = softwareSystem \"CertificadosService\" {\n            backend = container \"Backend\" {\n                certController = component \"Controlador de Certificados\" {\n                    description \"Maneja solicitudes de certificados\"\n                    tags \"component\"\n                    technology \"Node.js\"\n                }\n                bioService = component \"Servicio de Biometría\" {\n                    description \"Integra verificación biométrica\"\n                    tags \"component\"\n                    technology \"Node.js\"\n                }\n                dataRepo = component \"Repositorio de Datos\" {\n                    description \"Accede a datos de certificados\"\n                    tags \"component\"\n                    technology \"Node.js\"\n                }\n            }\n        }\n        representante = person \"Representante del Instituto\" {\n            description \"Encargado de generar certificados\"\n            tags \"User\"\n        }\n        group \"Google\" {\n            firebase = softwareSystem \"Firebase\" {\n                description \"Gestiona almacenamiento\"\n                tags \"external firebase\"\n            }\n        }\n        group \"Amazon\" {\n            rekognition = softwareSystem \"Amazon Rekognition\" {\n                description \"Verifica datos biométricos\"\n                tags \"external amazon\"\n            }\n        }\n        representante -> certController \"Solicita certificados\"\n        certController -> bioService \"Solicita verificación biométrica\"\n        certController -> dataRepo \"Almacena y consulta datos\"\n        bioService -> rekognition \"Valida biometría\"\n        dataRepo -> firebase \"Almacena datos\"\n    }\n    views {\n        component backend \"Components\" {\n            include *\n            autoLayout lr\n        }\n        styles {\n            element \"Person\" { background #08427b; color white; shape person }\n            element \"SoftwareSystem\" { background #e0e0e0; color black; shape roundedbox }\n            element \"external\" { background #f2f2f2; color black; shape roundedbox }\n            element \"container\" { background #d0d0ff; color black; shape roundedbox }\n            element \"component\" { background #b0ffb0; color black; shape box }\n        }\n    }\n}"
    },
    {
      "description": "A system context diagram for an e-commerce platform where customers browse products, place orders, and make payments via Stripe, with inventory managed by an external warehouse system.",
      "level": "systemContext",
      "dsl": "workspace \"ECommerce\" {\n    model {\n        customer = person \"Customer\" {\n            description \"Browses and orders products\"\n            tags \"User\"\n        }\n        group \"Platform\" {\n            app = softwareSystem \"ECommerceService\" {\n                description \"Manages catalog, orders, and payments\"\n                tags \"system\"\n            }\n        }\n        group \"Payments\" {\n            stripe = softwareSystem \"Stripe\" {\n                description \"Processes payments\"\n                tags \"external payment\"\n            }\n        }\n        group \"Logistics\" {\n            warehouse = softwareSystem \"WarehouseSystem\" {\n                description \"Manages inventory\"\n                tags \"external\"\n            }\n        }\n        customer -> app \"Solicita pedidos\"\n        app -> stripe \"Procesa pagos\"\n        app -> warehouse \"Consulta inventario\"\n    }\n    views {\n        systemContext app \"SystemContext\" {\n            include *\n            autoLayout lr\n        }\n        styles {\n            element \"Person\" { background #08427b; color white; shape person }\n            element \"system\" { background #003366; color white; shape roundedbox }\n            element \"external\" { background #f2f2f2; color black; shape roundedbox }\n            element \"payment\" { background #6772E5; color white; shape roundedbox }\n        }\n    }\n}"
    },
    {
      "description": "A container diagram for an IoT smart home system with a mobile app, cloud backend, and device gateway, integrated with AWS IoT for device communication.",
      "level": "container",
      "dsl": "workspace \"SmartHome\" {\n    model {\n        user = person \"Homeowner\" {\n            description \"Controls smart devices\"\n            tags \"User\"\n        }\n        app = softwareSystem \"SmartHomeService\" {\n            mobileApp = container \"MobileApp\" {\n                description \"Interface for controlling devices\"\n                technology \"Flutter\"\n                tags \"container mobile\"\n            }\n            backend = container \"Backend\" {\n                description \"Processes device commands\"\n                technology \"Node.js\"\n                tags \"container api\"\n            }\n            gateway = container \"DeviceGateway\" {\n                description \"Communicates with devices\"\n                technology \"Python\"\n                tags \"container\"\n            }\n        }\n        group \"Amazon\" {\n            awsIot = softwareSystem \"AWS IoT\" {\n                description \"Manages device communication\"\n                tags \"external amazon\"\n            }\n        }\n        user -> mobileApp \"Controla dispositivos\"\n        mobileApp -> backend \"Envía comandos\"\n        backend -> gateway \"Orquesta dispositivos\"\n        gateway -> awsIot \"Transmite datos\"\n    }\n    views {\n        container app \"Containers\" {\n            include *\n            autoLayout lr\n        }\n        styles {\n            element \"Person\" { background #08427b; color white; shape person }\n            element \"SoftwareSystem\" { background #e0e0e0; color black; shape roundedbox }\n            element \"external\" { background #f2f2f2; color black; shape roundedbox }\n            element \"container\" { background #d0d0ff; color black; shape roundedbox }\n            element \"mobile\" { background #d0d0ff; color black; shape roundedbox }\n            element \"api\" { background #d0d0ff; color black; shape roundedbox }\n        }\n    }\n}"
    },
    {
      "description": "A component diagram for the backend of CERTISEP, including components for certificate generation, biometric validation, and data storage, integrated with Firebase, Rekognition, SAT, and SEP.",
      "level": "component",
      "dsl": "workspace \"CERTISEP\" {\n    model {\n        userOper = person \"Usuario Operativo\" {\n            description \"Genera certificados\"\n            tags \"User\"\n        }\n        userAdmin = person \"Usuario Administrativo\" {\n            description \"Firma documentos\"\n            tags \"User\"\n        }\n        app = softwareSystem \"CertificadosService\" {\n            backend = container \"Backend\" {\n                certController = component \"CertController\" {\n                    description \"Coordina generación de certificados\"\n                    technology \"Node.js\"\n                    tags \"component\"\n                }\n                xmlGenerator = component \"XMLGenerator\" {\n                    description \"Genera XML conforme a SEP\"\n                    technology \"Node.js\"\n                    tags \"component\"\n                }\n                bioValidator = component \"BioValidator\" {\n                    description \"Valida biometría vía Rekognition\"\n                    technology \"Node.js\"\n                    tags \"component\"\n                }\n                dataRepo = component \"DataRepo\" {\n                    description \"Accede a datos en Firebase\"\n                    technology \"Node.js\"\n                    tags \"component\"\n                }\n            }\n        }\n        group \"Gobierno\" {\n            sat = softwareSystem \"SAT\" {\n                description \"Provee .CER/.KEY\"\n                tags \"external sat\"\n            }\n            sep = softwareSystem \"SEP\" {\n                description \"Define lineamientos\"\n                tags \"external sep\"\n            }\n        }\n        group \"Google\" {\n            firebase = softwareSystem \"Firebase\" {\n                description \"Autenticación y almacenamiento\"\n                tags \"external firebase\"\n            }\n        }\n        group \"Amazon\" {\n            rekognition = softwareSystem \"Rekognition\" {\n                description \"Validación biométrica\"\n                tags \"external amazon\"\n            }\n        }\n        userOper -> certController \"Carga plantillas\"\n        userAdmin -> certController \"Carga firma electrónica\"\n        certController -> xmlGenerator \"Solicita XML\"\n        certController -> dataRepo \"Almacena datos\"\n        certController -> bioValidator \"Valida biometría\"\n        xmlGenerator -> sep \"Verifica lineamientos\"\n        bioValidator -> rekognition \"Verifica biometría\"\n        dataRepo -> firebase \"Almacena datos\"\n        certController -> sat \"Valida .CER/.KEY\"\n    }\n    views {\n        component backend \"Components\" {\n            include *\n            autoLayout lr\n        }\n        styles {\n            element \"Person\" { background #08427b; color white; shape person }\n            element \"SoftwareSystem\" { background #e0e0e0; color black; shape roundedbox }\n            element \"external\" { background #f2f2f2; color black; shape roundedbox }\n            element \"container\" { background #d0d0ff; color black; shape roundedbox }\n            element \"component\" { background #b0ffb0; color black; shape box }\n            element \"sat\" { background #666666; color white; shape roundedbox }\n            element \"sep\" { background #666666; color white; shape roundedbox }\n            element \"firebase\" { background #4285F4; color white; shape roundedbox }\n            element \"amazon\" { background #FF9900; color black; shape roundedbox }\n        }\n    }\n}"
    }
  ],
  "known_issues": [
    {
      "issue": "Incorrect C4 level",
      "description": "AI generated Component or Container diagram instead of System Context.",
      "correction": "Enforce specified level (R04).",
      "example": {
        "invalid": "app = softwareSystem \"App\" { ui = container \"UI\" { } }",
        "corrected": "app = softwareSystem \"App\" { description \"App\"; tags \"system\" }"
      }
    },
    {
      "issue": "Redundant descriptions",
      "description": "AI used similar descriptions for elements and relationships.",
      "correction": "Ensure distinct descriptions (R15).",
      "example": {
        "invalid": "app = softwareSystem \"App\" { description \"Genera certificados\" } user -> app \"Solicita la generación de certificados\"",
        "corrected": "app = softwareSystem \"App\" { description \"Sistema para certificados\" } user -> app \"Solicita certificados\""
      }
    },
    {
      "issue": "Comments in DSL",
      "description": "AI included comments, causing potential parsing errors.",
      "correction": "Remove all comments (R12).",
      "example": {
        "invalid": "// Relaciones\napp -> db \"Consulta datos\"",
        "corrected": "app -> db \"Consulta datos\""
      }
    },
    {
      "issue": "Incorrect external system interaction",
      "description": "AI assumed direct interaction despite clarification (e.g., SAT, SEP).",
      "correction": "Parse clarifications with pre-generation validation (R10).",
      "example": {
        "invalid": "app -> sat \"Envía documentos para firma electrónica\"",
        "corrected": "representante -> app \"Carga firma electrónica\""
      }
    },
    {
      "issue": "Misplaced relationships",
      "description": "AI placed relationships outside model block.",
      "correction": "Ensure relationships within model (R09).",
      "example": {
        "invalid": "workspace { model { } views { } user -> app \"Action\" }",
        "corrected": "workspace { model { user -> app \"Action\" } views { } }"
      }
    },
    {
      "issue": "Incorrect grouping",
      "description": "AI grouped external systems generically (e.g., 'Servicios Externos') instead of provider-specific groups.",
      "correction": "Enforce provider-specific groups with pre-generation validation (R05).",
      "example": {
        "invalid": "group \"Servicios Externos\" { amazon = softwareSystem \"AmazonRekognition\" { } }",
        "corrected": "group \"Amazon\" { amazon = softwareSystem \"AmazonRekognition\" { } }"
      }
    },
    {
      "issue": "Unlisted technology or term",
      "description": "AI rejected or incorrectly mapped unlisted terms like 'NativeScript'.",
      "correction": "Use dynamic_mapping to process unlisted terms (R06).",
      "example": {
        "invalid": "mobile = container \"App\" { technology \"Unknown\" }",
        "corrected": "mobile = container \"MobileApp\" { technology \"NativeScript\"; tags \"container mobile\" }"
      }
    },
    {
      "issue": "Invalid view syntax",
      "description": "AI generated incorrect view titles (e.g., 'Diagrama de Contexto') or malformed view blocks.",
      "correction": "Enforce exact fixed_template titles (e.g., 'SystemContext') and formatting with pre-generation validation (R13, R09).",
      "example": {
        "invalid": "views { systemContext CertificadosApp \"Diagrama de Contexto\" { include *; autoLayout lr } }",
        "corrected": "views { systemContext CertificadosApp \"SystemContext\" { include *\n    autoLayout lr } }"
      }
    }
  ],
  "generation_guidelines": {
    "pre_validation": "Generate output strictly as Structurizr DSL, using fixed_template and example_mappings, with no other formats (e.g., ASCII, JSON, UML) permitted. Determine C4 level from description using level_detection, requiring explicit level specification. Apply provider-specific groups for all levels, strictly matching mapping_guidelines.groups, rejecting generic groups for known providers. Include all external systems mentioned in the description (e.g., Firebase, Rekognition, SAT, SEP), validated pre-generation. Use distinct descriptions, mandatory clarification parsing with pre-generation validation (e.g., 'carga' for SAT, 'verifica' for SEP), and exact fixed_template view titles (e.g., 'SystemContext'). Remove all comments (//, #, /*, */) with mandatory pre-generation validation. Place relationships within model block. Use dynamic_mapping for unlisted terms, prioritizing description-specific technologies (e.g., 'Node.js' over 'Spring Boot'). For Container diagrams, ensure all containers are nested within a softwareSystem block, and persons/external systems are at the model level in groups. For Component diagrams, ensure components are within a single container. Reject inline softwareSystem definitions or non-DSL outputs. Validate view syntax, titles, and indentation pre-generation. After correction requests, maintain Structurizr DSL format. Check known_issues and enforce R16-STRUCTURIZR-DSL-ONLY.",
    "post_validation": "Validate against rules in validation_order, ensuring correct C4 level, Structurizr DSL syntax, exact view titles, correct grouping, inclusion of all external systems, and description adherence. Confirm output is Structurizr DSL per R16-STRUCTURIZR-DSL-ONLY."
  },
  "rules": [
    {
      "id": "R01-WORKSPACE-ONLY",
      "title": "Use only workspace block",
      "description": "All code must be within a workspace block.",
      "applies_to": [
        "workspace"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Start with `workspace \"SYSTEM_NAME\" {` and end with `}`. Example: `workspace \"Certificados Digitales\" {`.",
      "correction_strategy": "Wrap code in `workspace \"System\" { }`.",
      "examples": [
        {
          "valid": true,
          "dsl": "workspace \"System\" { model { } views { } }"
        },
        {
          "valid": false,
          "dsl": "app = softwareSystem \"App\" { }",
          "error": "Code outside workspace"
        }
      ]
    },
    {
      "id": "R02-MODEL-VIEWS",
      "title": "Include model and views",
      "description": "Workspace must have model and views sections.",
      "applies_to": [
        "workspace"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Include `model { }` and `views { }`. Example: `model { app = softwareSystem \"App\" { } } views { systemContext app \"SystemContext\" { } }`.",
      "correction_strategy": "Add `model { }` or `views { styles { } }` if missing.",
      "examples": [
        {
          "valid": true,
          "dsl": "workspace \"System\" { model { app = softwareSystem \"App\" { description \"App\"; tags \"system\" } } views { systemContext app \"SystemContext\" { include * } } }"
        },
        {
          "valid": false,
          "dsl": "workspace \"System\" { model { } }",
          "error": "Missing views"
        }
      ]
    },
    {
      "id": "R03-ELEMENT-DEFINED",
      "title": "Define all elements",
      "description": "All used elements (softwareSystem, person, container, component) must be defined with identifier and multi-line properties.",
      "applies_to": [
        "softwareSystem",
        "person",
        "container",
        "component"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Define as `IDENTIFIER = TYPE \"NAME\" {\n    description \"TEXT\"\n    tags \"TAG\"\n    technology \"TECH\"\n}`. Technology optional for softwareSystem/person. Example: `app = softwareSystem \"App\" {\n    description \"App\"\n    tags \"system\"\n}`.",
      "correction_strategy": "Add definition with generic name and description. Separate properties into lines.",
      "examples": [
        {
          "valid": true,
          "dsl": "app = softwareSystem \"App\" {\n    description \"App\"\n    tags \"system\"\n}"
        },
        {
          "valid": false,
          "dsl": "app = softwareSystem \"App\" { description \"App\"; tags \"system\" }",
          "error": "Single-line definition with semicolon"
        }
      ]
    },
    {
      "id": "R04-LEVEL-ENFORCEMENT",
      "title": "Enforce specified C4 level",
      "description": "Generate diagram at the level explicitly specified in the description, ensuring elements match the C4 level hierarchy.",
      "applies_to": [
        "model"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Use `person`, `softwareSystem`, `group` at the model level for System Context; add `container` nested within `softwareSystem` for Containers; add `component` nested within `container` for Components. Reject unspecified levels. In container diagrams, only `container` elements can be nested inside a `softwareSystem` (e.g., `app = softwareSystem \"App\" { webApp = container \"WebApp\" { } }`). In component diagrams, only `component` elements can be nested inside a `container` within a `softwareSystem`. Persons and external systems must be defined at the model level in provider-specific groups (e.g., `group \"Gobierno\" { sat = softwareSystem \"SAT\" { } }`), not nested in `softwareSystem` or `container`. Apply pre-generation validation to enforce hierarchy. Example: For Container level, use `model { user = person \"User\" { } app = softwareSystem \"App\" { webApp = container \"WebApp\" { } } }`, not `app = softwareSystem \"App\" { user = person \"User\" { } }`.",
      "correction_strategy": "Convert to specified level, replacing invalid elements (e.g., top-level `container` → nested `container` in `softwareSystem`). Move persons or external systems nested in `softwareSystem` to the model level in provider-specific groups.",
      "examples": [
        {
          "valid": true,
          "dsl": "model {\n    user = person \"User\" {\n        description \"User\"\n        tags \"User\"\n    }\n    group \"Amazon\" {\n        rekognition = softwareSystem \"Rekognition\" {\n            description \"Biometrics\"\n            tags \"external amazon\"\n        }\n    }\n    app = softwareSystem \"App\" {\n        webApp = container \"WebApp\" {\n            description \"Web\"\n            tags \"container\"\n        }\n    }\n}"
        },
        {
          "valid": false,
          "dsl": "model {\n    app = softwareSystem \"App\" {\n        user = person \"User\" {\n            description \"User\"\n            tags \"User\"\n        }\n    }\n}",
          "error": "Invalid person nested in softwareSystem; persons must be at model level"
        },
        {
          "valid": false,
          "dsl": "model {\n    app = softwareSystem \"App\" {\n        rekognition = softwareSystem \"Rekognition\" {\n            description \"Biometrics\"\n            tags \"external amazon\"\n        }\n    }\n}",
          "error": "Invalid external system nested in softwareSystem; external systems must be at model level in provider-specific group"
        },
        {
          "valid": false,
          "dsl": "model {\n    user = person \"User\" {\n        description \"User\"\n        tags \"User\"\n    }\n    rekognition = softwareSystem \"Rekognition\" {\n        description \"Biometrics\"\n        tags \"external amazon\"\n    }\n    app = softwareSystem \"App\" {\n        webApp = container \"WebApp\" {\n            description \"Web\"\n            tags \"container\"\n        }\n    }\n}",
          "error": "External system not in provider-specific group; must be in group 'Amazon'"
        }
      ]
    },
    {
      "id": "R05-GROUP-REQUIRED",
      "title": "Required provider-specific grouping",
      "description": "All external systems mentioned in the description must be included in provider-specific groups for all C4 levels, using defined mappings, with no inline definitions.",
      "applies_to": [
        "softwareSystem"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Use `group \"NAME\" { }` for external systems in System Context, Container, and Component diagrams, strictly matching mapping_guidelines.groups (e.g., 'Gobierno' for SAT/SEP, 'Google' for Firebase, 'Amazon' for Rekognition). Include all external systems identified in the description (e.g., Firebase, Rekognition, SAT, SEP if mentioned for authentication, biometrics, or guidelines). Reject generic groups (e.g., 'Servicios Externos') unless no provider is identified. External systems must be defined as named elements (e.g., `firebase = softwareSystem \"Firebase\" { }`) within a group, not inline in relationships. Apply pre-generation validation to cross-check against description and mapping_guidelines.external_systems to ensure all mentioned external systems are included and grouped. Example: `group \"Google\" { firebase = softwareSystem \"Firebase\" { description \"Service\"; tags \"external firebase\" } }`.",
      "correction_strategy": "Move ungrouped or generically grouped external systems to provider-specific groups per mapping_guidelines.groups. Add missing external systems from the description in appropriate groups. Convert inline softwareSystem definitions to named elements in groups.",
      "examples": [
        {
          "valid": true,
          "dsl": "group \"Google\" {\n    firebase = softwareSystem \"Firebase\" {\n        description \"Service\"\n        tags \"external firebase\"\n    }\n}"
        },
        {
          "valid": false,
          "dsl": "group \"Servicios Externos\" {\n    sat = softwareSystem \"SAT\" {\n        description \"SAT\"\n        tags \"external sat\"\n    }\n}",
          "error": "Generic group 'Servicios Externos' not allowed for known provider (SAT); use 'Gobierno'"
        },
        {
          "valid": false,
          "dsl": "model {\n    app = softwareSystem \"App\" {\n        description \"App\"\n        tags \"system\"\n    }\n    group \"Gobierno\" {\n        sep = softwareSystem \"SEP\" {\n            description \"SEP\"\n            tags \"external sep\"\n        }\n    }\n}",
          "error": "Missing external system (e.g., SAT) mentioned in description for signature validation"
        },
        {
          "valid": false,
          "dsl": "rekognition = softwareSystem \"Amazon Rekognition\" {\n    description \"Biometrics\"\n    tags \"external amazon\"\n}",
          "error": "External system not in provider-specific group; must be in group 'Amazon'"
        }
      ]
    },
    {
      "id": "R06-ALLOWED-NAMES",
      "title": "Use allowed or dynamically mapped names",
      "description": "Element names must use glossary terms or dynamically mapped technologies/domain terms, preferring glossary terms for main systems. Component names must avoid redundancy with their type (e.g., 'Controller' not 'Controller CertController'). Technologies must match those specified in the provided documentation.",
      "applies_to": [
        "softwareSystem.name",
        "container.name",
        "component.name"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Use terms from allowed_names (e.g., Service, Database, Controller) or map unlisted terms per dynamic_mapping (e.g., 'NativeScript' → container 'MobileApp' { technology 'NativeScript' }). For main systems, prefer glossary terms like 'Service' (e.g., 'CertificadosService'). Component names must not repeat their type (e.g., use 'Auth' not 'Adapter AuthAdapter'). Validate technology properties against documentation with pre-generation validation, rejecting undocumented or overly specific technologies (e.g., 'Flutter', 'Node.js 16 / Firebase Functions' if documentation specifies 'Node.js'). Example: `CertificadosService`, `container \"MobileApp\" { technology \"NativeScript\" }`, `component \"Auth\" { technology \"Node.js\" }`.",
      "correction_strategy": "Replace forbidden names with closest glossary term or apply dynamic_mapping. Remove redundant type prefixes in component names (e.g., 'Adapter AuthAdapter' → 'Auth'). Replace invalid technologies with those from documentation (e.g., 'Flutter' → 'NativeScript').",
      "examples": [
        {
          "valid": true,
          "dsl": "app = softwareSystem \"CertificadosService\" {\n    description \"App\"\n    tags \"system\"\n}"
        },
        {
          "valid": true,
          "dsl": "mobile = container \"MobileApp\" {\n    description \"Mobile interface\"\n    technology \"NativeScript\"\n    tags \"container mobile\"\n}"
        },
        {
          "valid": true,
          "dsl": "auth = component \"Auth\" {\n    description \"Handles authentication\"\n    technology \"Node.js\"\n    tags \"component\"\n}"
        },
        {
          "valid": false,
          "dsl": "app = softwareSystem \"ModuleCertificados\" {\n    description \"App\"\n    tags \"system\"\n}",
          "error": "Forbidden name: module"
        },
        {
          "valid": false,
          "dsl": "auth = component \"Adapter AuthAdapter\" {\n    description \"Handles authentication\"\n    technology \"Node.js\"\n    tags \"component\"\n}",
          "error": "Redundant component name: 'Adapter AuthAdapter'; use 'Auth'"
        },
        {
          "valid": false,
          "dsl": "api = container \"API\" {\n    description \"Backend\"\n    technology \"Node.js 16 / Firebase Functions\"\n    tags \"container api\"\n}",
          "error": "Invalid technology: 'Node.js 16 / Firebase Functions'; use 'Node.js' from documentation"
        }
      ]
    },
    {
      "id": "R07-SIMPLE-TAG",
      "title": "Use allowed tags",
      "description": "Elements must use glossary tags or dynamically created tags with default styles.",
      "applies_to": [
        "element.tags"
      ],
      "severity": "warning",
      "validation": "automated",
      "instruction": "Use tags: User, system, external, container, component, sat, sep, firebase, amazon, payment, authentication, messaging, analytics, logging, mobile, web, database, api. Dynamic tags allowed with default external style. Example: `tags \"external sat\"`.",
      "correction_strategy": "Replace invalid tags with appropriate glossary tag or assign default external style (background #f2f2f2; color black; shape roundedbox).",
      "examples": [
        {
          "valid": true,
          "dsl": "app = softwareSystem \"App\" { description \"App\"; tags \"system\" }"
        },
        {
          "valid": false,
          "dsl": "app = softwareSystem \"App\" { description \"App\"; tags \"invalid\" }",
          "error": "Invalid tag"
        }
      ]
    },
    {
      "id": "R08-ALLOWED-ELEMENTS",
      "title": "Use allowed elements",
      "description": "Model can only contain level-appropriate elements.",
      "applies_to": [
        "model"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Use `person`, `softwareSystem`, `group` for System Context; add `container` for Containers; add `component` for Components. No `system` or `relationship`. Example: `app = softwareSystem \"App\" { }` for System Context.",
      "correction_strategy": "Replace invalid elements with correct type (e.g., `container` → `softwareSystem` in System Context).",
      "examples": [
        {
          "valid": true,
          "dsl": "app = softwareSystem \"App\" { description \"App\"; tags \"system\" }"
        },
        {
          "valid": false,
          "dsl": "app = container \"App\" { description \"App\" }",
          "error": "Invalid element: container in System Context"
        }
      ]
    },
    {
      "id": "R09-SYNTAX-VALIDATION",
      "title": "Ensure valid Structurizr DSL syntax",
      "description": "DSL must have valid Structurizr syntax without semicolons, with relationships in model block, correct view definitions, and exact formatting. Non-DSL formats (e.g., ASCII, JSON) are rejected.",
      "applies_to": [
        "dsl.syntax"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Ensure balanced braces, closed quotes, no invalid characters, no semicolons, relationships within `model`, and valid view syntax exactly matching fixed_template (e.g., `systemContext IDENTIFIER \"SystemContext\" { include *\n    autoLayout lr }`, `component CONTAINER_ID \"Components\" { include *\n    autoLayout lr }`). Validate indentation, exact titles (e.g., 'SystemContext', 'Components'), and reject malformed view blocks, dotted identifiers (e.g., `app.container`), or non-DSL formats (e.g., ASCII, JSON). Relationships must be inside the `model` block. Apply pre-generation validation to enforce fixed_template structure and R16-STRUCTURIZR-DSL-ONLY. Example: `workspace { model { user -> app \"Action\" } views { component backend \"Components\" { include *\n    autoLayout lr } } }`.",
      "correction_strategy": "Fix braces, quotes, remove invalid characters/semicolons, move relationships to model block, correct view syntax to match fixed_template (e.g., replace `component app.container \"Backend\"` with `component backend \"Components\"`, ensure newline after include, fix indentation). Convert non-DSL outputs to Structurizr DSL using fixed_template.",
      "examples": [
        {
          "valid": true,
          "dsl": "workspace \"System\" {\n    model {\n        app = softwareSystem \"App\" {\n            description \"App\"\n            tags \"system\"\n        }\n        user -> app \"Consulta datos\"\n    }\n    views {\n        systemContext app \"SystemContext\" {\n            include *\n            autoLayout lr\n        }\n    }\n}"
        },
        {
          "valid": false,
          "dsl": "workspace {\n    model { }\n    user -> app \"Consulta datos\"\n    views { }\n}",
          "error": "Relationship outside model block"
        },
        {
          "valid": false,
          "dsl": "+---------+\n|  User   |\n+---------+\n   |     \n   v     \n+---------+\n|  System |\n+---------+",
          "error": "Invalid ASCII output; must be Structurizr DSL"
        }
      ]
    },
    {
      "id": "R10-ALLOWED-VERBS",
      "title": "Use allowed verbs in relationships",
      "description": "Relationships must use glossary verbs and strictly respect clarifications, with pre-generation validation.",
      "applies_to": [
        "relationship"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Use verbs from allowed_verbs in `SOURCE -> DESTINATION \"VERB DESCRIPTION\"`, mandatorily enforcing clarifications (e.g., SAT → 'carga', Firebase → 'almacena'/'procesa', SEP → 'consulta'/'verifica', user actions → 'solicita'/'carga'). Apply pre-generation validation to ensure clarification-driven verbs. In Component diagrams, relationships should involve components within a container or user-to-component actions. Description must start with an allowed verb. Example: `app -> db \"Consulta datos\"`, `user -> app \"Carga firma electrónica\"` for SAT, `user -> app \"Solicita certificados\"` for user actions.",
      "correction_strategy": "Replace invalid verbs with closest allowed verb per synonyms or clarifications (e.g., 'genera' → 'solicita' for user actions, 'envía' → 'carga' for SAT). Ensure clarification-driven verbs are prioritized.",
      "examples": [
        {
          "valid": true,
          "dsl": "app -> db \"Consulta datos\""
        },
        {
          "valid": true,
          "dsl": "user -> app \"Carga firma electrónica\""
        },
        {
          "valid": true,
          "dsl": "user -> app \"Solicita certificados\""
        },
        {
          "valid": false,
          "dsl": "user -> app \"Genera certificados\"",
          "error": "Invalid verb: 'genera' for user action; use 'solicita' or 'carga'"
        },
        {
          "valid": false,
          "dsl": "app -> sat \"Envía documentos para firma electrónica\"",
          "error": "Invalid verb: 'envía' for SAT; use 'carga'"
        }
      ]
    },
    {
      "id": "R11-CORRECT-REFERENCES",
      "title": "Use exact identifiers",
      "description": "References in relationships and views must match defined identifiers.",
      "applies_to": [
        "relationship",
        "views"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Use defined identifiers (e.g., `app`, `user`). Example: `app -> db \"Consulta datos\"`.",
      "correction_strategy": "Replace invalid references with defined identifiers.",
      "examples": [
        {
          "valid": true,
          "dsl": "app = softwareSystem \"App\" { description \"App\"; tags \"system\" } user -> app \"Consulta datos\""
        },
        {
          "valid": false,
          "dsl": "App -> db \"Consulta datos\"",
          "error": "Undefined identifier: App"
        }
      ]
    },
    {
      "id": "R12-NO-COMMENTS",
      "title": "No comments",
      "description": "DSL must not contain comments to ensure clean, parsable output, with mandatory pre-generation stripping.",
      "applies_to": [
        "dsl.syntax"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Remove `//`, `#`, `/*`, `*/` before generation with mandatory pre-generation validation. Common comment patterns like `// Relaciones internas` or `// External system` must be stripped. Example: ensure no `// Relaciones internas`.",
      "correction_strategy": "Remove all detected comments.",
      "examples": [
        {
          "valid": true,
          "dsl": "workspace \"System\" {\n    model { }\n}"
        },
        {
          "valid": false,
          "dsl": "workspace \"System\" {\n    // Relaciones internas\n    model { }\n}",
          "error": "Comment detected: // Relaciones internas"
        }
      ]
    },
    {
      "id": "R13-VIEW-OPTIONAL",
      "title": "Optional view for level",
      "description": "Include view matching specified C4 level, with correct container identifier for component views, exact fixed_template title and formatting, without semicolons, validated pre-generation.",
      "applies_to": [
        "views"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Use `systemContext IDENTIFIER \"SystemContext\"` for System Context, `container IDENTIFIER \"Containers\"` for Containers, `component CONTAINER_ID \"Components\"` for Components, exactly as in fixed_template, with `include *\n    autoLayout lr`. Enforce exact title (e.g., 'SystemContext', not 'Diagrama de Contexto') and correct indentation with mandatory pre-generation validation. Omit if not specified. Example: `systemContext app \"SystemContext\" {\n    include *\n    autoLayout lr\n}`.",
      "correction_strategy": "Add missing view based on C4 level, correct view syntax to match fixed_template (e.g., replace `systemContext IDENTIFIER \"Diagrama de Contexto\"` with `systemContext IDENTIFIER \"SystemContext\"`, ensure newline after include, fix indentation), remove semicolons.",
      "examples": [
        {
          "valid": true,
          "dsl": "views { systemContext app \"SystemContext\" { include *\n    autoLayout lr } }"
        },
        {
          "valid": true,
          "dsl": "views { component backend \"Components\" { include *\n    autoLayout lr } }"
        },
        {
          "valid": false,
          "dsl": "views { systemContext CertificadosApp \"Diagrama de Contexto\" { include *; autoLayout lr } }",
          "error": "Invalid systemContext view: incorrect title 'Diagrama de Contexto' or semicolon"
        },
        {
          "valid": false,
          "dsl": "views { systemContext CertificadosApp \"SystemContext\" { include * autoLayout lr } }",
          "error": "Invalid systemContext view: incorrect indentation, missing newline"
        },
        {
          "valid": false,
          "dsl": "views {\n    component app.container \"Backend\" {\n        include *\n        autoLayout lr\n    }\n}",
          "error": "Invalid component view: dotted identifier 'app.container'; use container identifier (e.g., 'backend')"
        }
      ]
    },
    {
      "id": "R14-STYLE-DEFINITIONS",
      "title": "Include style definitions",
      "description": "Views must include styles matching fixed_template for the level, with defaults for dynamic tags.",
      "applies_to": [
        "views"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Include `styles` matching fixed_template for Person, system, external, container, component, sat, sep, firebase, amazon. Add defaults for dynamic tags (e.g., mobile, payment). Properties on separate lines. Example: `element \"system\" { background #003366\n    color white\n    shape roundedbox }`.",
      "correction_strategy": "Replace invalid styles with fixed_template defaults, add default style (background #f2f2f2; color black; shape roundedbox) for dynamic tags, separate properties.",
      "examples": [
        {
          "valid": true,
          "dsl": "views { styles { element \"Person\" { background #08427b\n    color white\n    shape person } } }"
        },
        {
          "valid": true,
          "dsl": "views { styles { element \"mobile\" { background #f2f2f2\n    color black\n    shape roundedbox } } }"
        },
        {
          "valid": false,
          "dsl": "views { styles { element \"system\" { background #1168bd } } }",
          "error": "Invalid style for system"
        }
      ]
    },
    {
      "id": "R15-DISTINCT-DESCRIPTIONS",
      "title": "Distinct element and relationship descriptions",
      "description": "Relationship descriptions must be distinct from element descriptions, use concise action-oriented verbs, and avoid redundancy with system/container purpose, validated pre-generation.",
      "applies_to": [
        "element.description",
        "relationship.description"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Ensure relationship descriptions start with an allowed verb, differ significantly from element descriptions, and are concise. Avoid repeating system/container purpose (e.g., 'generación de certificados'). In Component diagrams, relationships should describe specific component actions. Apply pre-generation validation to reject redundant phrases. Example: element `Sistema para certificados`, relationship `Solicita certificados`.",
      "correction_strategy": "Modify relationship description to use a distinct, concise verb or phrase (e.g., 'Solicita la generación de certificados y títulos digitales' → 'Solicita certificados').",
      "examples": [
        {
          "valid": true,
          "dsl": "app = softwareSystem \"App\" { description \"Sistema para certificados\"; tags \"system\" } user -> app \"Solicita certificados\""
        },
        {
          "valid": false,
          "dsl": "app = softwareSystem \"App\" { description \"Genera certificados\"; tags \"system\" } user -> app \"Solicita la generación de certificados y títulos digitales\"",
          "error": "Relationship description redundant with element description"
        }
      ]
    },
    {
      "id": "R16-STRUCTURIZR-DSL-ONLY",
      "title": "Output in Structurizr DSL only",
      "description": "All generated C4 model diagrams must be in Structurizr DSL format, strictly adhering to the fixed_template structure. Non-DSL formats (e.g., ASCII, JSON, UML, or other diagramming notations) are prohibited. Correction requests must also result in Structurizr DSL output.",
      "applies_to": [
        "output"
      ],
      "severity": "error",
      "validation": "automated",
      "instruction": "Generate output exclusively as Structurizr DSL, using the fixed_template for the specified C4 level (systemContext, container, component). Ensure the output includes `workspace`, `model`, and `views` blocks with proper syntax (e.g., `workspace \"SYSTEM_NAME\" { model { } views { } }`). Reject ASCII diagrams, JSON, UML, or other formats. After correction requests, maintain Structurizr DSL format. Example: `workspace \"System\" { model { app = softwareSystem \"App\" { } } views { systemContext app \"SystemContext\" { include * } } }`. Apply pre-generation validation to enforce DSL format.",
      "correction_strategy": "Convert any non-DSL output (e.g., ASCII, JSON) to Structurizr DSL using the fixed_template for the specified C4 level. Ensure correction outputs remain in DSL.",
      "examples": [
        {
          "valid": true,
          "dsl": "workspace \"System\" {\n    model {\n        user = person \"User\" {\n            description \"User\"\n            tags \"User\"\n        }\n        app = softwareSystem \"App\" {\n            description \"App\"\n            tags \"system\"\n        }\n        user -> app \"Solicita acción\"\n    }\n    views {\n        systemContext app \"SystemContext\" {\n            include *\n            autoLayout lr\n        }\n        styles {\n            element \"Person\" { background #08427b; color white; shape person }\n            element \"system\" { background #003366; color white; shape roundedbox }\n        }\n    }\n}"
        },
        {
          "valid": false,
          "dsl": "+---------+\n|  User   |\n+---------+\n   |     \n   v     \n+---------+\n|  System |\n+---------+",
          "error": "Invalid ASCII diagram; output must be Structurizr DSL"
        },
        {
          "valid": false,
          "dsl": "{\"model\":{\"user\":\"User\",\"system\":\"App\"}}",
          "error": "Invalid JSON output; output must be Structurizr DSL"
        }
      ]
    }
  ]
}
